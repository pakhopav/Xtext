{
    tokens = [

        BRACKET = 'regexp:[{}]'



        ID =  'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
        SEP = 'regexp::'
        WHITE_SPACE = 'regexp:\s+'
    ]




  parserClass="com.intellij.xtext.samples.simple.parser.SimpleParser"

  extends="com.intellij.xtext.samples.simple.psi.impl.SimplePsiCompositeElementImpl"

  psiClassPrefix="Simple"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.xtext.samples.simple.psi"
  psiImplPackage="com.intellij.xtext.samples.simple.impl"

  elementTypeHolderClass="com.intellij.xtext.samples.simple.psi.SimpleTypes"
  elementTypeClass="com.intellij.xtext.samples.simple.psi.SimpleElementType"
  tokenTypeClass="com.intellij.xtext.samples.simple.psi.SimpleTokenType"

  psiImplUtilClass="com.intellij.xtext.samples.simple.psi.impl.SimplePsiImplUtil"
  generateTokenAccessors=true
  generateTokens=true
}

simpleFile ::= Type*

private Type ::= (DataType | Entity | COMMENT)

DataType ::= datatype  ID
{
    mixin="com.intellij.xtext.samples.simple.psi.impl.SimpleNamedElementImpl"
    implements="com.intellij.xtext.samples.simple.psi.SimpleNamedElement"
    methods=[getIdSimpleDatatype getName setName getNameIdentifier]
}

Entity ::= ent  ID (extends REFERENCE_TO_ENTITY)? "{"
    Feature*
    "}"
{
    mixin="com.intellij.xtext.samples.simple.psi.impl.SimpleNamedElementImpl"
    implements="com.intellij.xtext.samples.simple.psi.SimpleNamedElement"
    methods=[getIdSimpleEntity getName setName getNameIdentifier ]
}

Feature ::= ID SEP REFERENCE_TO_DATATYPE


REFERENCE_TO_DATATYPE ::= ID
REFERENCE_TO_ENTITY ::= ID